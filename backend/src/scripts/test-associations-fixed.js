const { sequelize } = require('../config/database');
const { defineAssociations, VisitPlanning, VisitPlanningItem, User } = require('../models');

async function testAssociationsFixed() {
  try {
    console.log('üß™ Testando associa√ß√µes do Sequelize (vers√£o corrigida)...\n');
    
    // 1. Definir associa√ß√µes primeiro
    console.log('üîó Definindo associa√ß√µes...');
    defineAssociations();
    console.log('‚úÖ Associa√ß√µes definidas!');
    
    // 2. Testar associa√ß√£o VisitPlanning -> User
    console.log('\nüîó Testando VisitPlanning -> User...');
    try {
      const planning = await VisitPlanning.findOne({
        include: [
          { model: User, as: 'responsible', attributes: ['id', 'name', 'email'] }
        ]
      });
      
      if (planning) {
        console.log('  ‚úÖ VisitPlanning -> User funcionou');
        console.log(`    - Planning ID: ${planning.id}`);
        console.log(`    - Respons√°vel: ${planning.responsible?.name || 'N/A'}`);
      } else {
        console.log('  ‚ö†Ô∏è  Nenhum planejamento encontrado');
      }
    } catch (error) {
      console.log(`  ‚ùå Erro na associa√ß√£o VisitPlanning -> User: ${error.message}`);
      console.log(`  üîç Stack trace: ${error.stack}`);
    }
    
    // 3. Testar associa√ß√£o completa (como na rota)
    console.log('\nüîó Testando associa√ß√£o completa (como na rota)...');
    try {
      const plannings = await VisitPlanning.findAll({
        include: [
          { model: User, as: 'responsible', attributes: ['id', 'name', 'email'] },
          { 
            model: VisitPlanningItem, 
            as: 'items', 
            attributes: [
              'id', 'status', 'planned_date', 'planned_time', 'client_id', 'client_name', 
              'client_address', 'visit_type', 'priority', 'estimated_duration', 'planned_distance', 
              'planned_fuel', 'planned_cost', 'notes', 'visit_id', 'actual_date', 
              'actual_time', 'actual_duration', 'actual_distance', 'actual_fuel', 'actual_cost', 
              'completion_notes'
            ]
          }
        ],
        order: [['week_start_date', 'DESC']]
      });
      
      if (plannings.length > 0) {
        console.log('  ‚úÖ Associa√ß√£o completa funcionou');
        console.log(`    - Total de planejamentos: ${plannings.length}`);
        plannings.forEach((planning, index) => {
          console.log(`    ${index + 1}. Planning: ${planning.id}, Status: ${planning.status}`);
          console.log(`       Respons√°vel: ${planning.responsible?.name || 'N/A'}`);
          console.log(`       Itens: ${planning.items?.length || 0}`);
        });
      } else {
        console.log('  ‚ö†Ô∏è  Nenhum planejamento encontrado');
      }
    } catch (error) {
      console.log(`  ‚ùå Erro na associa√ß√£o completa: ${error.message}`);
      console.log(`  üîç Stack trace: ${error.stack}`);
    }
    
    console.log('\n‚úÖ Teste de associa√ß√µes corrigidas conclu√≠do!');
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error);
  } finally {
    await sequelize.close();
  }
}

// Executar teste
testAssociationsFixed();