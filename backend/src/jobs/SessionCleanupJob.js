const cron = require('node-cron');
const SessionService = require('../services/SessionService');

class SessionCleanupJob {
  
  static start() {
    console.log('üìÖ Iniciando job de limpeza de sess√µes...');
    
    // Executar a cada hora (0 minutos de cada hora)
    cron.schedule('0 * * * *', async () => {
      try {
        console.log('üßπ Executando limpeza de sess√µes expiradas...');
        const cleanedCount = await SessionService.cleanExpiredSessions();
        
        if (cleanedCount > 0) {
          console.log(`‚úÖ ${cleanedCount} sess√£o(√µes) expirada(s) foram limpas`);
        } else {
          console.log('‚ÑπÔ∏è Nenhuma sess√£o expirada encontrada');
        }
      } catch (error) {
        console.error('‚ùå Erro na limpeza de sess√µes:', error);
      }
    });
    
    // Executar uma vez na inicializa√ß√£o (ap√≥s 5 segundos)
    setTimeout(async () => {
      try {
        console.log('üßπ Executando limpeza inicial de sess√µes...');
        const cleanedCount = await SessionService.cleanExpiredSessions();
        
        if (cleanedCount > 0) {
          console.log(`‚úÖ Limpeza inicial: ${cleanedCount} sess√£o(√µes) expirada(s) foram limpas`);
        } else {
          console.log('‚ÑπÔ∏è Limpeza inicial: Nenhuma sess√£o expirada encontrada');
        }
      } catch (error) {
        console.error('‚ùå Erro na limpeza inicial de sess√µes:', error);
      }
    }, 5000);
    
    console.log('‚úÖ Job de limpeza de sess√µes configurado (executa a cada hora)');
  }
  
  static stop() {
    console.log('üõë Parando job de limpeza de sess√µes...');
    // node-cron n√£o tem m√©todo direto para parar tarefas espec√≠ficas
    // mas elas param quando o processo termina
  }
}

module.exports = SessionCleanupJob;

